diff -urwE '--exclude=*.patch' '--exclude=*.fix.java' /mnt/d4j_bug_info/buggyfiles/math/math_60_buggy/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java /mnt/D4JPatches/Manual2023/patches_plausible/Math/Math_60/Math_60_TBar_normal/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
--- /mnt/d4j_bug_info/buggyfiles/math/math_60_buggy/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	2022-11-20 04:09:32.000000000 -0800
+++ /mnt/D4JPatches/Manual2023/patches_plausible/Math/Math_60/Math_60_TBar_normal/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java	2023-11-13 22:37:06.000000000 -0800
@@ -14,11 +14,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.commons.math.distribution;
 
 import java.io.Serializable;
-
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.exception.NotStrictlyPositiveException;
 import org.apache.commons.math.MaxIterationsExceededException;
@@ -32,22 +30,37 @@
  *
  * @version $Revision$ $Date$
  */
-public class NormalDistributionImpl extends AbstractContinuousDistribution
-        implements NormalDistribution, Serializable {
+public class NormalDistributionImpl extends AbstractContinuousDistribution implements NormalDistribution, Serializable {
+
     /**
      * Default inverse cumulative probability accuracy.
      * @since 2.1
      */
     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;
-    /** Serializable version identifier. */
+
+    /**
+     * Serializable version identifier.
+     */
     private static final long serialVersionUID = 8589540077390120676L;
-    /** &sqrt;(2 &pi;) */
+
+    /**
+     * &sqrt;(2 &pi;)
+     */
     private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);
-    /** Mean of this distribution. */
+
+    /**
+     * Mean of this distribution.
+     */
     private final double mean;
-    /** Standard deviation of this distribution. */
+
+    /**
+     * Standard deviation of this distribution.
+     */
     private final double standardDeviation;
-    /** Inverse cumulative probability accuracy. */
+
+    /**
+     * Inverse cumulative probability accuracy.
+     */
     private final double solverAbsoluteAccuracy;
 
     /**
@@ -74,7 +87,6 @@
         if (sd <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);
         }
-
         this.mean = mean;
         standardDeviation = sd;
         solverAbsoluteAccuracy = inverseCumAccuracy;
@@ -124,10 +136,10 @@
     public double cumulativeProbability(double x) throws MathException {
         final double dev = x - mean;
         try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
+            return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0))));
         } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
+            if (x < (mean - 20 * standardDeviation)) {
+                // JDK 1.5 blows at 38
                 return 0;
             } else if (x > (mean + 20 * standardDeviation)) {
                 return 1;
@@ -163,8 +175,7 @@
      * {@code p} is not a valid probability.
      */
     @Override
-    public double inverseCumulativeProbability(final double p)
-    throws MathException {
+    public double inverseCumulativeProbability(final double p) throws MathException {
         if (p == 0) {
             return Double.NEGATIVE_INFINITY;
         }
@@ -197,13 +208,11 @@
     @Override
     protected double getDomainLowerBound(double p) {
         double ret;
-
         if (p < 0.5) {
             ret = -Double.MAX_VALUE;
         } else {
             ret = mean;
         }
-
         return ret;
     }
 
@@ -218,13 +227,11 @@
     @Override
     protected double getDomainUpperBound(double p) {
         double ret;
-
         if (p < 0.5) {
             ret = mean;
         } else {
             ret = Double.MAX_VALUE;
         }
-
         return ret;
     }
 
@@ -239,7 +246,6 @@
     @Override
     protected double getInitialDomain(double p) {
         double ret;
-
         if (p < 0.5) {
             ret = mean - standardDeviation;
         } else if (p > 0.5) {
@@ -247,7 +253,6 @@
         } else {
             ret = mean;
         }
-
         return ret;
     }
 }
