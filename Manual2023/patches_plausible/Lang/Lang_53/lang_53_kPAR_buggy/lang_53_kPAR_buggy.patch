diff -urwE '--exclude=*.patch' '--exclude=*.fix.java' /mnt/d4j_bug_info/buggyfiles/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java /mnt/D4JPatches/Manual2023/patches_plausible/Lang/Lang_53/lang_53_kPAR_buggy/src/java/org/apache/commons/lang/time/DateUtils.java
--- /mnt/d4j_bug_info/buggyfiles/lang/lang_53_buggy/src/java/org/apache/commons/lang/time/DateUtils.java	2022-11-20 04:09:31.000000000 -0800
+++ /mnt/D4JPatches/Manual2023/patches_plausible/Lang/Lang_53/lang_53_kPAR_buggy/src/java/org/apache/commons/lang/time/DateUtils.java	2023-11-13 22:37:06.000000000 -0800
@@ -43,21 +43,25 @@
      * The UTC time zone  (often referred to as GMT).
      */
     public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("GMT");
+
     /**
      * Number of milliseconds in a standard second.
      * @since 2.1
      */
     public static final long MILLIS_PER_SECOND = 1000;
+
     /**
      * Number of milliseconds in a standard minute.
      * @since 2.1
      */
     public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;
+
     /**
      * Number of milliseconds in a standard hour.
      * @since 2.1
      */
     public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;
+
     /**
      * Number of milliseconds in a standard day.
      * @since 2.1
@@ -70,17 +74,8 @@
      */
     public final static int SEMI_MONTH = 1001;
 
-    private static final int[][] fields = {
-            {Calendar.MILLISECOND},
-            {Calendar.SECOND},
-            {Calendar.MINUTE},
-            {Calendar.HOUR_OF_DAY, Calendar.HOUR},
-            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM 
-                /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */
-            },
-            {Calendar.MONTH, DateUtils.SEMI_MONTH},
-            {Calendar.YEAR},
-            {Calendar.ERA}};
+    private static final int[][] fields = { { Calendar.MILLISECOND }, { Calendar.SECOND }, { Calendar.MINUTE }, { Calendar.HOUR_OF_DAY, Calendar.HOUR }, { Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */
+    }, { Calendar.MONTH, DateUtils.SEMI_MONTH }, { Calendar.YEAR }, { Calendar.ERA } };
 
     /**
      * A week range, starting on Sunday.
@@ -166,9 +161,7 @@
         if (cal1 == null || cal2 == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
-        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
+        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
     }
 
     //-----------------------------------------------------------------------
@@ -225,14 +218,7 @@
         if (cal1 == null || cal2 == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                cal1.getClass() == cal2.getClass());
+        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
     }
 
     //-----------------------------------------------------------------------
@@ -253,7 +239,6 @@
         if (str == null || parsePatterns == null) {
             throw new IllegalArgumentException("Date and Patterns must not be null");
         }
-        
         SimpleDateFormat parser = null;
         ParsePosition pos = new ParsePosition(0);
         for (int i = 0; i < parsePatterns.length; i++) {
@@ -621,21 +606,17 @@
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
-        
         if (field == Calendar.MILLISECOND) {
             return;
         }
-
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
-
         Date date = val.getTime();
         long time = date.getTime();
         boolean done = false;
-
         // truncate milliseconds
         int millisecs = val.get(Calendar.MILLISECOND);
         if (!round || millisecs < 500) {
@@ -644,7 +625,6 @@
             done = true;
             }
         }
-
         // truncate seconds
         int seconds = val.get(Calendar.SECOND);
         if (!done && (!round || seconds < 30)) {
@@ -653,20 +633,17 @@
             done = true;
             }
         }
-
         // truncate minutes
         int minutes = val.get(Calendar.MINUTE);
         if (!done && (!round || minutes < 30)) {
             time = time - (minutes * 60000L);
         }
-
         // reset time
-        if (date.getTime() != time) {
+        if ((!round || millisecs < 500)) {
             date.setTime(time);
             val.setTime(date);
         }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
-
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
@@ -740,7 +717,6 @@
             }
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
 
     //-----------------------------------------------------------------------
@@ -909,7 +885,9 @@
      * <p>Date iterator.</p>
      */
     static class DateIterator implements Iterator {
+
         private final Calendar endFinal;
+
         private final Calendar spot;
         
         /**
@@ -961,30 +939,31 @@
     //------------------------------------------------------------------------- 
     // Deprecated int constants
     // TODO: Remove in 3.0
-    
     /**
      * Number of milliseconds in a standard second.
      * 
      * @deprecated Use MILLIS_PER_SECOND. This will be removed in Commons Lang 3.0.
      */
     public static final int MILLIS_IN_SECOND = 1000;
+
     /**
      * Number of milliseconds in a standard minute.
      * 
      * @deprecated Use MILLIS_PER_MINUTE. This will be removed in Commons Lang 3.0.
      */
     public static final int MILLIS_IN_MINUTE = 60 * 1000;
+
     /**
      * Number of milliseconds in a standard hour.
      * 
      * @deprecated Use MILLIS_PER_HOUR. This will be removed in Commons Lang 3.0.
      */
     public static final int MILLIS_IN_HOUR = 60 * 60 * 1000;
+
     /**
      * Number of milliseconds in a standard day.
      * 
      * @deprecated Use MILLIS_PER_DAY. This will be removed in Commons Lang 3.0.
      */
     public static final int MILLIS_IN_DAY = 24 * 60 * 60 * 1000;
-    
 }
