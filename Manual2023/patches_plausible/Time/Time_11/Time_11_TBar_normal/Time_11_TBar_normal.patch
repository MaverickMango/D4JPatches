diff -urwE '--exclude=*.patch' '--exclude=*.fix.java' /mnt/d4j_bug_info/buggyfiles/time/time_11_buggy/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java /mnt/D4JPatches/Manual2023/patches_plausible/Time/Time_11/Time_11_TBar_normal/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
--- /mnt/d4j_bug_info/buggyfiles/time/time_11_buggy/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java	2022-11-20 04:09:31.000000000 -0800
+++ /mnt/D4JPatches/Manual2023/patches_plausible/Time/Time_11/Time_11_TBar_normal/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java	2023-11-13 22:37:06.000000000 -0800
@@ -32,7 +32,6 @@
 import java.util.StringTokenizer;
 import java.util.TreeMap;
 import java.util.Map.Entry;
-
 import org.joda.time.Chronology;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeField;
@@ -61,11 +60,13 @@
  * @since 1.0
  */
 public class ZoneInfoCompiler {
+
     static DateTimeOfYear cStartOfYear;
 
     static Chronology cLenientISO;
 
     static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();
+
     static {
         cVerbose.set(Boolean.FALSE);
     }
@@ -75,7 +76,7 @@
      * @return true to log verbosely
      */
     public static boolean verbose() {
-        return cVerbose.get();
+        return cVerbose != null || cVerbose.get();
     }
 
     //-----------------------------------------------------------------------
@@ -95,11 +96,9 @@
             printUsage();
             return;
         }
-
         File inputDir = null;
         File outputDir = null;
         boolean verbose = false;
-
         int i;
         for (i=0; i<args.length; i++) {
             try {
@@ -120,17 +119,14 @@
                 return;
             }
         }
-
         if (i >= args.length) {
             printUsage();
             return;
         }
-
         File[] sources = new File[args.length - i];
         for (int j=0; i<args.length; i++,j++) {
             sources[j] = inputDir == null ? new File(args[i]) : new File(inputDir, args[i]);
         }
-
         cVerbose.set(verbose);
         ZoneInfoCompiler zic = new ZoneInfoCompiler();
         zic.compile(outputDir, sources);
@@ -165,7 +161,6 @@
         // Build the string pool.
         Map<String, Short> idToIndex = new HashMap<String, Short>(zimap.size());
         TreeMap<Short, String> indexToId = new TreeMap<Short, String>();
-
         short count = 0;
         for (Entry<String, DateTimeZone> entry : zimap.entrySet()) {
             String id = (String)entry.getKey();
@@ -187,13 +182,11 @@
                 }
             }
         }
-
         // Write the string pool, ordered by index.
         dout.writeShort(indexToId.size());
         for (String id : indexToId.values()) {
             dout.writeUTF(id);
         }
-
         // Write the mappings.
         dout.writeShort(zimap.size());
         for (Entry<String, DateTimeZone> entry : zimap.entrySet()) {
@@ -250,13 +243,21 @@
 
     static char parseZoneChar(char c) {
         switch (c) {
-        case 's': case 'S':
+            case 's':
+            case 'S':
             // Standard time
             return 's';
-        case 'u': case 'U': case 'g': case 'G': case 'z': case 'Z':
+            case 'u':
+            case 'U':
+            case 'g':
+            case 'G':
+            case 'z':
+            case 'Z':
             // UTC
             return 'u';
-        case 'w': case 'W': default:
+            case 'w':
+            case 'W':
+            default:
             // Wall time
             return 'w';
         }
@@ -269,76 +270,47 @@
         if (!id.equals(tz.getID())) {
             return true;
         }
-
         // Test to ensure that reported transitions are not duplicated.
-
         long millis = ISOChronology.getInstanceUTC().year().set(0, 1850);
         long end = ISOChronology.getInstanceUTC().year().set(0, 2050);
-
         int offset = tz.getOffset(millis);
         String key = tz.getNameKey(millis);
-
         List<Long> transitions = new ArrayList<Long>();
-
         while (true) {
             long next = tz.nextTransition(millis);
             if (next == millis || next > end) {
                 break;
             }
-
             millis = next;
-
             int nextOffset = tz.getOffset(millis);
             String nextKey = tz.getNameKey(millis);
-
-            if (offset == nextOffset
-                && key.equals(nextKey)) {
-                System.out.println("*d* Error in " + tz.getID() + " "
-                                   + new DateTime(millis,
-                                                  ISOChronology.getInstanceUTC()));
+            if (offset == nextOffset && key.equals(nextKey)) {
+                System.out.println("*d* Error in " + tz.getID() + " " + new DateTime(millis, ISOChronology.getInstanceUTC()));
                 return false;
             }
-
             if (nextKey == null || (nextKey.length() < 3 && !"??".equals(nextKey))) {
-                System.out.println("*s* Error in " + tz.getID() + " "
-                                   + new DateTime(millis,
-                                                  ISOChronology.getInstanceUTC())
-                                   + ", nameKey=" + nextKey);
+                System.out.println("*s* Error in " + tz.getID() + " " + new DateTime(millis, ISOChronology.getInstanceUTC()) + ", nameKey=" + nextKey);
                 return false;
             }
-
             transitions.add(Long.valueOf(millis));
-
             offset = nextOffset;
             key = nextKey;
         }
-
         // Now verify that reverse transitions match up.
-
         millis = ISOChronology.getInstanceUTC().year().set(0, 2050);
         end = ISOChronology.getInstanceUTC().year().set(0, 1850);
-
         for (int i=transitions.size(); --i>= 0; ) {
             long prev = tz.previousTransition(millis);
             if (prev == millis || prev < end) {
                 break;
             }
-
             millis = prev;
-
             long trans = transitions.get(i).longValue();
-            
             if (trans - 1 != millis) {
-                System.out.println("*r* Error in " + tz.getID() + " "
-                                   + new DateTime(millis,
-                                                  ISOChronology.getInstanceUTC()) + " != "
-                                   + new DateTime(trans - 1,
-                                                  ISOChronology.getInstanceUTC()));
-                                   
+                System.out.println("*r* Error in " + tz.getID() + " " + new DateTime(millis, ISOChronology.getInstanceUTC()) + " != " + new DateTime(trans - 1, ISOChronology.getInstanceUTC()));
                 return false;
             }
         }
-
         return true;
     }
 
@@ -371,7 +343,6 @@
                 in.close();
             }
         }
-
         if (outputDir != null) {
             if (!outputDir.exists()) {
                 if (!outputDir.mkdirs()) {
@@ -382,9 +353,7 @@
                 throw new IOException("Destination is not a directory: " + outputDir);
             }
         }
-
         Map<String, DateTimeZone> map = new TreeMap<String, DateTimeZone>();
-
         System.out.println("Writing zoneinfo files");
         for (int i=0; i<iZones.size(); i++) {
             Zone zone = iZones.get(i);
@@ -408,20 +377,16 @@
                     } finally {
                         out.close();
                     }
-
                     // Test if it can be read back.
                     InputStream in = new FileInputStream(file);
                     DateTimeZone tz2 = DateTimeZoneBuilder.readFrom(in, tz.getID());
                     in.close();
-
                     if (!original.equals(tz2)) {
-                        System.out.println("*e* Error in " + tz.getID() +
-                                           ": Didn't read properly from file");
+                        System.out.println("*e* Error in " + tz.getID() + ": Didn't read properly from file");
                     }
                 }
             }
         }
-
         for (int pass=0; pass<2; pass++) {
             for (int i=0; i<iLinks.size(); i += 2) {
                 String id = iLinks.get(i);
@@ -429,22 +394,19 @@
                 DateTimeZone tz = map.get(id);
                 if (tz == null) {
                     if (pass > 0) {
-                        System.out.println("Cannot find time zone '" + id +
-                                           "' to link alias '" + alias + "' to");
+                        System.out.println("Cannot find time zone '" + id + "' to link alias '" + alias + "' to");
                     }
                 } else {
                     map.put(alias, tz);
                 }
             }
         }
-
         if (outputDir != null) {
             System.out.println("Writing ZoneInfoMap");
             File file = new File(outputDir, "ZoneInfoMap");
             if (!file.getParentFile().exists()) {
                 file.getParentFile().mkdirs();
             }
-
             OutputStream out = new FileOutputStream(file);
             DataOutputStream dout = new DataOutputStream(out);
             try {
@@ -456,7 +418,6 @@
                 dout.close();
             }
         }
-
         return map;
     }
 
@@ -468,16 +429,12 @@
             if (trimmed.length() == 0 || trimmed.charAt(0) == '#') {
                 continue;
             }
-
             int index = line.indexOf('#');
             if (index >= 0) {
                 line = line.substring(0, index);
             }
-
             //System.out.println(line);
-
             StringTokenizer st = new StringTokenizer(line, " \t");
-
             if (Character.isWhitespace(line.charAt(0)) && st.hasMoreTokens()) {
                 if (zone != null) {
                     // Zone continuation
@@ -490,7 +447,6 @@
                 }
                 zone = null;
             }
-
             if (st.hasMoreTokens()) {
                 String token = st.nextToken();
                 if (token.equalsIgnoreCase("Rule")) {
@@ -512,18 +468,23 @@
                 }
             }
         }
-
         if (zone != null) {
             iZones.add(zone);
         }
     }
 
     static class DateTimeOfYear {
+
         public final int iMonthOfYear;
+
         public final int iDayOfMonth;
+
         public final int iDayOfWeek;
+
         public final boolean iAdvanceDayOfWeek;
+
         public final int iMillisOfDay;
+
         public final char iZoneChar;
 
         DateTimeOfYear() {
@@ -542,10 +503,8 @@
             int millis = 0;
             boolean advance = false;
             char zoneChar = 'w';
-
             if (st.hasMoreTokens()) {
                 month = parseMonth(st.nextToken());
-
                 if (st.hasMoreTokens()) {
                     String str = st.nextToken();
                     if (str.startsWith("last")) {
@@ -575,14 +534,11 @@
                             }
                         }
                     }
-
                     if (st.hasMoreTokens()) {
                         str = st.nextToken();
                         zoneChar = parseZoneChar(str.charAt(str.length() - 1));
                         if (str.equals("24:00")) {
-                            LocalDate date = (day == -1 ?
-                                    new LocalDate(2001, month, 1).plusMonths(1) :
-                                    new LocalDate(2001, month, day).plusDays(1));
+                            LocalDate date = (day == -1 ? new LocalDate(2001, month, 1).plusMonths(1) : new LocalDate(2001, month, day).plusDays(1));
                             advance = (day != -1);
                             month = date.getMonthOfYear();
                             day = date.getDayOfMonth();
@@ -593,7 +549,6 @@
                     }
                 }
             }
-
             iMonthOfYear = month;
             iDayOfMonth = day;
             iDayOfWeek = dayOfWeek;
@@ -605,50 +560,36 @@
         /**
          * Adds a recurring savings rule to the builder.
          */
-        public void addRecurring(DateTimeZoneBuilder builder, String nameKey,
-                                 int saveMillis, int fromYear, int toYear)
-        {
-            builder.addRecurringSavings(nameKey, saveMillis,
-                                        fromYear, toYear,
-                                        iZoneChar,
-                                        iMonthOfYear,
-                                        iDayOfMonth,
-                                        iDayOfWeek,
-                                        iAdvanceDayOfWeek,
-                                        iMillisOfDay);
+        public void addRecurring(DateTimeZoneBuilder builder, String nameKey, int saveMillis, int fromYear, int toYear) {
+            builder.addRecurringSavings(nameKey, saveMillis, fromYear, toYear, iZoneChar, iMonthOfYear, iDayOfMonth, iDayOfWeek, iAdvanceDayOfWeek, iMillisOfDay);
         }
 
         /**
          * Adds a cutover to the builder.
          */
         public void addCutover(DateTimeZoneBuilder builder, int year) {
-            builder.addCutover(year,
-                               iZoneChar,
-                               iMonthOfYear,
-                               iDayOfMonth,
-                               iDayOfWeek,
-                               iAdvanceDayOfWeek,
-                               iMillisOfDay);
+            builder.addCutover(year, iZoneChar, iMonthOfYear, iDayOfMonth, iDayOfWeek, iAdvanceDayOfWeek, iMillisOfDay);
         }
 
         public String toString() {
-            return
-                "MonthOfYear: " + iMonthOfYear + "\n" +
-                "DayOfMonth: " + iDayOfMonth + "\n" +
-                "DayOfWeek: " + iDayOfWeek + "\n" +
-                "AdvanceDayOfWeek: " + iAdvanceDayOfWeek + "\n" +
-                "MillisOfDay: " + iMillisOfDay + "\n" +
-                "ZoneChar: " + iZoneChar + "\n";
+            return "MonthOfYear: " + iMonthOfYear + "\n" + "DayOfMonth: " + iDayOfMonth + "\n" + "DayOfWeek: " + iDayOfWeek + "\n" + "AdvanceDayOfWeek: " + iAdvanceDayOfWeek + "\n" + "MillisOfDay: " + iMillisOfDay + "\n" + "ZoneChar: " + iZoneChar + "\n";
         }
     }
 
     private static class Rule {
+
         public final String iName;
+
         public final int iFromYear;
+
         public final int iToYear;
+
         public final String iType;
+
         public final DateTimeOfYear iDateTimeOfYear;
+
         public final int iSaveMillis;
+
         public final String iLetterS;
 
         Rule(StringTokenizer st) {
@@ -669,8 +610,7 @@
          */
         public void addRecurring(DateTimeZoneBuilder builder, String nameFormat) {
             String nameKey = formatName(nameFormat);
-            iDateTimeOfYear.addRecurring
-                (builder, nameKey, iSaveMillis, iFromYear, iToYear);
+            iDateTimeOfYear.addRecurring(builder, nameKey, iSaveMillis, iFromYear, iToYear);
         }
 
         private String formatName(String nameFormat) {
@@ -699,19 +639,12 @@
         }
 
         public String toString() {
-            return
-                "[Rule]\n" + 
-                "Name: " + iName + "\n" +
-                "FromYear: " + iFromYear + "\n" +
-                "ToYear: " + iToYear + "\n" +
-                "Type: " + iType + "\n" +
-                iDateTimeOfYear +
-                "SaveMillis: " + iSaveMillis + "\n" +
-                "LetterS: " + iLetterS + "\n";
+            return "[Rule]\n" + "Name: " + iName + "\n" + "FromYear: " + iFromYear + "\n" + "ToYear: " + iToYear + "\n" + "Type: " + iType + "\n" + iDateTimeOfYear + "SaveMillis: " + iSaveMillis + "\n" + "LetterS: " + iLetterS + "\n";
         }
     }
 
     private static class RuleSet {
+
         private List<Rule> iRules;
 
         RuleSet(Rule rule) {
@@ -738,11 +671,17 @@
     }
 
     private static class Zone {
+
         public final String iName;
+
         public final int iOffsetMillis;
+
         public final String iRules;
+
         public final String iFormat;
+
         public final int iUntilYear;
+
         public final DateTimeOfYear iUntilDateTimeOfYear;
 
         private Zone iNext;
@@ -756,17 +695,14 @@
             iOffsetMillis = parseTime(st.nextToken());
             iRules = parseOptional(st.nextToken());
             iFormat = st.nextToken().intern();
-
             int year = Integer.MAX_VALUE;
             DateTimeOfYear dtOfYear = getStartOfYear();
-
             if (st.hasMoreTokens()) {
                 year = Integer.parseInt(st.nextToken());
                 if (st.hasMoreTokens()) {
                     dtOfYear = new DateTimeOfYear(st);
                 }
             }
-
             iUntilYear = year;
             iUntilDateTimeOfYear = dtOfYear;
         }
@@ -786,7 +722,6 @@
             return builder.toDateTimeZone(iName);
         }
         */
-
         /**
          * Adds zone info to the builder.
          */
@@ -794,13 +729,9 @@
             addToBuilder(this, builder, ruleSets);
         }
 
-        private static void addToBuilder(Zone zone,
-                                         DateTimeZoneBuilder builder,
-                                         Map<String, RuleSet> ruleSets)
-        {
+        private static void addToBuilder(Zone zone, DateTimeZoneBuilder builder, Map<String, RuleSet> ruleSets) {
             for (; zone != null; zone = zone.iNext) {
                 builder.setStandardOffset(zone.iOffsetMillis);
-
                 if (zone.iRules == null) {
                     builder.setFixedSavings(zone.iFormat, 0);
                 } else {
@@ -808,41 +739,27 @@
                         // Check if iRules actually just refers to a savings.
                         int saveMillis = parseTime(zone.iRules);
                         builder.setFixedSavings(zone.iFormat, saveMillis);
-                    }
-                    catch (Exception e) {
+                    } catch (Exception e) {
                         RuleSet rs = ruleSets.get(zone.iRules);
                         if (rs == null) {
-                            throw new IllegalArgumentException
-                                ("Rules not found: " + zone.iRules);
+                            throw new IllegalArgumentException("Rules not found: " + zone.iRules);
                         }
                         rs.addRecurring(builder, zone.iFormat);
                     }
                 }
-
                 if (zone.iUntilYear == Integer.MAX_VALUE) {
                     break;
                 }
-
                 zone.iUntilDateTimeOfYear.addCutover(builder, zone.iUntilYear);
             }
         }
 
         public String toString() {
-            String str =
-                "[Zone]\n" + 
-                "Name: " + iName + "\n" +
-                "OffsetMillis: " + iOffsetMillis + "\n" +
-                "Rules: " + iRules + "\n" +
-                "Format: " + iFormat + "\n" +
-                "UntilYear: " + iUntilYear + "\n" +
-                iUntilDateTimeOfYear;
-
+            String str = "[Zone]\n" + "Name: " + iName + "\n" + "OffsetMillis: " + iOffsetMillis + "\n" + "Rules: " + iRules + "\n" + "Format: " + iFormat + "\n" + "UntilYear: " + iUntilYear + "\n" + iUntilDateTimeOfYear;
             if (iNext == null) {
                 return str;
             }
-
             return str + "...\n" + iNext.toString();
         }
     }
 }
-
Only in /mnt/D4JPatches/Manual2023/patches_plausible/Time/Time_11/Time_11_TBar_normal/src/main/java/org/joda/time/tz: ZoneInfoCompiler.java.orig
