diff -urwE '--exclude=*.patch' '--exclude=*.fix.java' /mnt/d4j_bug_info/buggyfiles/lang/lang_48_buggy/src/java/org/apache/commons/lang/builder/EqualsBuilder.java /mnt/D4JPatches/Manual2023/patches_correct/Lang/Lang_48/Lang_48_RepairIngredients/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
--- /mnt/d4j_bug_info/buggyfiles/lang/lang_48_buggy/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	2022-11-20 04:09:31.000000000 -0800
+++ /mnt/D4JPatches/Manual2023/patches_correct/Lang/Lang_48/Lang_48_RepairIngredients/src/java/org/apache/commons/lang/builder/EqualsBuilder.java	2023-11-13 22:37:06.000000000 -0800
@@ -102,7 +102,6 @@
     }
 
     //-------------------------------------------------------------------------
-
     /**
      * <p>This method uses reflection to determine if the two <code>Object</code>s
      * are equal.</p>
@@ -144,7 +143,8 @@
      * @param excludeFields  Collection of String field names to exclude from testing
      * @return <code>true</code> if the two Objects have tested equals.
      */
-    public static boolean reflectionEquals(Object lhs, Object rhs, Collection /*String*/ excludeFields) {
+    public static boolean reflectionEquals(Object lhs, Object rhs, Collection /*String*/
+    excludeFields) {
         return reflectionEquals(lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));
     }
 
@@ -250,8 +250,7 @@
      * @return <code>true</code> if the two Objects have tested equals.
      * @since 2.0
      */
-    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass,
-            String[] excludeFields) {
+    public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass, String[] excludeFields) {
         if (lhs == rhs) {
             return true;
         }
@@ -310,22 +309,13 @@
      * @param useTransients  whether to test transient fields
      * @param excludeFields  array of field names to exclude from testing
      */
-    private static void reflectionAppend(
-        Object lhs,
-        Object rhs,
-        Class clazz,
-        EqualsBuilder builder,
-        boolean useTransients,
-        String[] excludeFields) {
+    private static void reflectionAppend(Object lhs, Object rhs, Class clazz, EqualsBuilder builder, boolean useTransients, String[] excludeFields) {
         Field[] fields = clazz.getDeclaredFields();
         List excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;
         AccessibleObject.setAccessible(fields, true);
         for (int i = 0; i < fields.length && builder.isEquals; i++) {
             Field f = fields[i];
-            if (!excludedFieldList.contains(f.getName())
-                && (f.getName().indexOf('$') == -1)
-                && (useTransients || !Modifier.isTransient(f.getModifiers()))
-                && (!Modifier.isStatic(f.getModifiers()))) {
+            if (!excludedFieldList.contains(f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers())) && (!Modifier.isStatic(f.getModifiers()))) {
                 try {
                     builder.append(f.get(lhs), f.get(rhs));
                 } catch (IllegalAccessException e) {
@@ -338,7 +328,6 @@
     }
 
     //-------------------------------------------------------------------------
-
     /**
      * <p>Adds the result of <code>super.equals()</code> to this builder.</p>
      *
@@ -355,7 +344,6 @@
     }
 
     //-------------------------------------------------------------------------
-
     /**
      * <p>Test if two <code>Object</code>s are equal using their
      * <code>equals</code> method.</p>
@@ -377,15 +365,18 @@
         }
         Class lhsClass = lhs.getClass();
         if (!lhsClass.isArray()) {
+            if (lhs instanceof java.math.BigDecimal) {
+                isEquals = (((java.math.BigDecimal) lhs).compareTo(rhs) == 0);
+            } else {
                 // The simple case, not an array, just test the element
                 isEquals = lhs.equals(rhs);
+            }
         } else if (lhs.getClass() != rhs.getClass()) {
             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] 
             this.setEquals(false);
-        }
-        // 'Switch' on type of array, to dispatch to the correct handler
+        } else // 'Switch' on type of array, to dispatch to the correct handler
         // This handles multi dimensional arrays of the same depth
-        else if (lhs instanceof long[]) {
+        if (lhs instanceof long[]) {
             append((long[]) lhs, (long[]) rhs);
         } else if (lhs instanceof int[]) {
             append((int[]) lhs, (int[]) rhs);
