diff -urwE '--exclude=*.patch' '--exclude=*.fix.java' /mnt/d4j_bug_info/buggyfiles/lang/lang_21_buggy/src/main/java/org/apache/commons/lang3/time/DateUtils.java /mnt/D4JPatches/Manual2023/patches_correct/Lang/Lang_21/Lang_21_TBar/src/main/java/org/apache/commons/lang3/time/DateUtils.java
--- /mnt/d4j_bug_info/buggyfiles/lang/lang_21_buggy/src/main/java/org/apache/commons/lang3/time/DateUtils.java	2022-11-20 04:09:31.000000000 -0800
+++ /mnt/D4JPatches/Manual2023/patches_correct/Lang/Lang_21/Lang_21_TBar/src/main/java/org/apache/commons/lang3/time/DateUtils.java	2023-11-13 22:37:06.000000000 -0800
@@ -40,8 +40,6 @@
  * kind of date-field you want your result, for instance milliseconds or days.
  * </p>
  *   
- *   
- *
  * @author Apache Software Foundation
  * @author <a href="mailto:sergek@lokitech.com">Serge Knystautas</a>
  * @author Janek Bogucki
@@ -58,21 +56,25 @@
      * The UTC time zone  (often referred to as GMT).
      */
     public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("GMT");
+
     /**
      * Number of milliseconds in a standard second.
      * @since 2.1
      */
     public static final long MILLIS_PER_SECOND = 1000;
+
     /**
      * Number of milliseconds in a standard minute.
      * @since 2.1
      */
     public static final long MILLIS_PER_MINUTE = 60 * MILLIS_PER_SECOND;
+
     /**
      * Number of milliseconds in a standard hour.
      * @since 2.1
      */
     public static final long MILLIS_PER_HOUR = 60 * MILLIS_PER_MINUTE;
+
     /**
      * Number of milliseconds in a standard day.
      * @since 2.1
@@ -85,17 +87,8 @@
      */
     public final static int SEMI_MONTH = 1001;
 
-    private static final int[][] fields = {
-            {Calendar.MILLISECOND},
-            {Calendar.SECOND},
-            {Calendar.MINUTE},
-            {Calendar.HOUR_OF_DAY, Calendar.HOUR},
-            {Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM 
-                /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */
-            },
-            {Calendar.MONTH, DateUtils.SEMI_MONTH},
-            {Calendar.YEAR},
-            {Calendar.ERA}};
+    private static final int[][] fields = { { Calendar.MILLISECOND }, { Calendar.SECOND }, { Calendar.MINUTE }, { Calendar.HOUR_OF_DAY, Calendar.HOUR }, { Calendar.DATE, Calendar.DAY_OF_MONTH, Calendar.AM_PM /* Calendar.DAY_OF_YEAR, Calendar.DAY_OF_WEEK, Calendar.DAY_OF_WEEK_IN_MONTH */
+    }, { Calendar.MONTH, DateUtils.SEMI_MONTH }, { Calendar.YEAR }, { Calendar.ERA } };
 
     /**
      * A week range, starting on Sunday.
@@ -145,7 +138,6 @@
      */
     public final static int MODIFY_CEILING= 2;
     
-
     /**
      * <p><code>DateUtils</code> instances should NOT be constructed in
      * standard programming. Instead, the class should be used as
@@ -200,9 +192,7 @@
         if (cal1 == null || cal2 == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
-        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
+        return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR));
     }
 
     //-----------------------------------------------------------------------
@@ -259,14 +249,7 @@
         if (cal1 == null || cal2 == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&
-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&
-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&
-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&
-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&
-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
-                cal1.getClass() == cal2.getClass());
+        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) && cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) && cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) && cal1.get(MODIFY_TRUNCATE) == cal2.get(Calendar.HOUR) && cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) && cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) && cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) && cal1.getClass() == cal2.getClass());
     }
 
     //-----------------------------------------------------------------------
@@ -323,33 +306,26 @@
      * @throws ParseException if none of the date patterns were suitable
      * @see java.util.Calender#isLenient()
      */
-    private static Date parseDateWithLeniency(String str, String[] parsePatterns,
-            boolean lenient) throws ParseException {
+    private static Date parseDateWithLeniency(String str, String[] parsePatterns, boolean lenient) throws ParseException {
         if (str == null || parsePatterns == null) {
             throw new IllegalArgumentException("Date and Patterns must not be null");
         }
-        
         SimpleDateFormat parser = new SimpleDateFormat();
         parser.setLenient(lenient);
         ParsePosition pos = new ParsePosition(0);
         for (int i = 0; i < parsePatterns.length; i++) {
-
             String pattern = parsePatterns[i];
-
             // LANG-530 - need to make sure 'ZZ' output doesn't get passed to SimpleDateFormat
             if (parsePatterns[i].endsWith("ZZ")) {
                 pattern = pattern.substring(0, pattern.length() - 1);
             }
-            
             parser.applyPattern(pattern);
             pos.setIndex(0);
-
             String str2 = str;
             // LANG-530 - need to make sure 'ZZ' output doesn't hit SimpleDateFormat as it will ParseException
             if (parsePatterns[i].endsWith("ZZ")) {
                 str2 = str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$", "$1$2"); 
             }
-
             Date date = parser.parse(str2, pos);
             if (date != null && pos.getIndex() == str2.length()) {
                 return date;
@@ -942,21 +918,17 @@
         if (val.get(Calendar.YEAR) > 280000000) {
             throw new ArithmeticException("Calendar value too large for accurate calculations");
         }
-        
         if (field == Calendar.MILLISECOND) {
             return;
         }
-
         // ----------------- Fix for LANG-59 ---------------------- START ---------------
         // see http://issues.apache.org/jira/browse/LANG-59
         //
         // Manually truncate milliseconds, seconds and minutes, rather than using
         // Calendar methods.
-
         Date date = val.getTime();
         long time = date.getTime();
         boolean done = false;
-
         // truncate milliseconds
         int millisecs = val.get(Calendar.MILLISECOND);
         if (MODIFY_TRUNCATE == modType || millisecs < 500) {
@@ -965,7 +937,6 @@
         if (field == Calendar.SECOND) {
             done = true;
         }
-
         // truncate seconds
         int seconds = val.get(Calendar.SECOND);
         if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {
@@ -974,20 +945,17 @@
         if (field == Calendar.MINUTE) {
             done = true;
         }
-
         // truncate minutes
         int minutes = val.get(Calendar.MINUTE);
         if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {
             time = time - (minutes * 60000L);
         }
-
         // reset time
         if (date.getTime() != time) {
             date.setTime(time);
             val.setTime(date);
         }
         // ----------------- Fix for LANG-59 ----------------------- END ----------------
-
         boolean roundUp = false;
         for (int i = 0; i < fields.length; i++) {
             for (int j = 0; j < fields[i].length; j++) {
@@ -1073,7 +1041,6 @@
             }
         }
         throw new IllegalArgumentException("The field " + field + " is not supported");
-
     }
 
     //-----------------------------------------------------------------------
@@ -1474,6 +1441,7 @@
   public static long getFragmentInMilliseconds(Calendar calendar, int fragment) {
     return getFragment(calendar, fragment, Calendar.MILLISECOND);
   }
+
     /**
      * <p>Returns the number of seconds within the 
      * fragment. All datefields greater than the fragment will be ignored.</p> 
@@ -1673,7 +1641,6 @@
         }
         long millisPerUnit = getMillisPerUnit(unit);
         long result = 0;
-        
         // Fragments bigger than a day require a breakdown to days
         switch (fragment) {
             case Calendar.YEAR:
@@ -1683,12 +1650,10 @@
                 result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;
                 break;
         }
-
         switch (fragment) {
             // Number of days already calculated for these cases
             case Calendar.YEAR:
             case Calendar.MONTH:
-            
             // The rest of the valid cases
             case Calendar.DAY_OF_YEAR:
             case Calendar.DATE:
@@ -1703,8 +1668,11 @@
             case Calendar.SECOND:
                 result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;
                 break;
-            case Calendar.MILLISECOND: break;//never useful
-                default: throw new IllegalArgumentException("The fragment " + fragment + " is not supported");
+            //never useful
+            case Calendar.MILLISECOND:
+                break;
+            default:
+                throw new IllegalArgumentException("The fragment " + fragment + " is not supported");
         }
         return result;
     }
@@ -1810,7 +1778,8 @@
             case Calendar.MILLISECOND:
                 result = 1;
                 break;
-            default: throw new IllegalArgumentException("The unit " + unit + " cannot be represented is milleseconds");
+            default:
+                throw new IllegalArgumentException("The unit " + unit + " cannot be represented is milleseconds");
         }
         return result;
     }
@@ -1819,7 +1788,9 @@
      * <p>Date iterator.</p>
      */
     static class DateIterator implements Iterator<Calendar> {
+
         private final Calendar endFinal;
+
         private final Calendar spot;
         
         /**
@@ -1867,5 +1838,4 @@
             throw new UnsupportedOperationException();
         }
     }
-    
 }
