diff -urwE '--exclude=*.patch' '--exclude=*.fix.java' /mnt/d4j_bug_info/buggyfiles/math/math_104_buggy/src/java/org/apache/commons/math/special/Gamma.java /mnt/D4JPatches/Manual2023/patches_correct/Math/Math_104/Math_104_Avatar/src/java/org/apache/commons/math/special/Gamma.java
--- /mnt/d4j_bug_info/buggyfiles/math/math_104_buggy/src/java/org/apache/commons/math/special/Gamma.java	2022-11-20 04:09:32.000000000 -0800
+++ /mnt/D4JPatches/Manual2023/patches_correct/Math/Math_104/Math_104_Avatar/src/java/org/apache/commons/math/special/Gamma.java	2023-11-13 22:37:06.000000000 -0800
@@ -17,7 +17,6 @@
 package org.apache.commons.math.special;
 
 import java.io.Serializable;
-
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.MaxIterationsExceededException;
 import org.apache.commons.math.util.ContinuedFraction;
@@ -30,36 +29,26 @@
  */
 public class Gamma implements Serializable {
     
-    /** Serializable version identifier */
+    /**
+     * Serializable version identifier
+     */
     private static final long serialVersionUID = -6587513359895466954L;
 
-    /** Maximum allowed numerical error. */
+    /**
+     * Maximum allowed numerical error.
+     */
     private static final double DEFAULT_EPSILON = 10e-9;
 
-    /** Lanczos coefficients */
-    private static double[] lanczos =
-    {
-        0.99999999999999709182,
-        57.156235665862923517,
-        -59.597960355475491248,
-        14.136097974741747174,
-        -0.49191381609762019978,
-        .33994649984811888699e-4,
-        .46523628927048575665e-4,
-        -.98374475304879564677e-4,
-        .15808870322491248884e-3,
-        -.21026444172410488319e-3,
-        .21743961811521264320e-3,
-        -.16431810653676389022e-3,
-        .84418223983852743293e-4,
-        -.26190838401581408670e-4,
-        .36899182659531622704e-5,
-    };
+    /**
+     * Lanczos coefficients
+     */
+    private static double[] lanczos = { 0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, .33994649984811888699e-4, .46523628927048575665e-4, -.98374475304879564677e-4, .15808870322491248884e-3, -.21026444172410488319e-3, .21743961811521264320e-3, -.16431810653676389022e-3, .84418223983852743293e-4, -.26190838401581408670e-4, .36899182659531622704e-5 };
 
-    /** Avoid repeated computation of log of 2 PI in logGamma */
+    /**
+     * Avoid repeated computation of log of 2 PI in logGamma
+     */
     private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);
 
-    
     /**
      * Default constructor.  Prohibit instantiation.
      */
@@ -86,23 +75,18 @@
      */
     public static double logGamma(double x) {
         double ret;
-
         if (Double.isNaN(x) || (x <= 0.0)) {
             ret = Double.NaN;
         } else {
             double g = 607.0 / 128.0;
-            
             double sum = 0.0;
             for (int i = lanczos.length - 1; i > 0; --i) {
                 sum = sum + (lanczos[i] / (x + i));
             }
             sum = sum + lanczos[0];
-
             double tmp = x + g + .5;
-            ret = ((x + .5) * Math.log(tmp)) - tmp +
-                HALF_LOG_2_PI + Math.log(sum / x);
+            ret = ((x + .5) * Math.log(tmp)) - tmp + HALF_LOG_2_PI + Math.log(sum / x);
         }
-
         return ret;
     }
 
@@ -114,13 +98,10 @@
      * @return the regularized gamma function P(a, x)
      * @throws MathException if the algorithm fails to converge.
      */
-    public static double regularizedGammaP(double a, double x)
-        throws MathException
-    {
+    public static double regularizedGammaP(double a, double x) throws MathException {
         return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
     }
         
-        
     /**
      * Returns the regularized gamma function P(a, x).
      * 
@@ -147,32 +128,28 @@
      * @return the regularized gamma function P(a, x)
      * @throws MathException if the algorithm fails to converge.
      */
-    public static double regularizedGammaP(double a, 
-                                           double x, 
-                                           double epsilon, 
-                                           int maxIterations) 
-        throws MathException
-    {
+    public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException {
         double ret;
-
         if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
             ret = Double.NaN;
         } else if (x == 0.0) {
             ret = 0.0;
-        } else if (a >= 1.0 && x > a) {
+        } else if (a >= 1.0 && x >= a) {
             // use regularizedGammaQ because it should converge faster in this
             // case.
             ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);
         } else {
             // calculate series
-            double n = 0.0; // current element index
-            double an = 1.0 / a; // n-th element in the series
-            double sum = an; // partial sum
+            // current element index
+            double n = 0.0;
+            // n-th element in the series
+            double an = 1.0 / a;
+            // partial sum
+            double sum = an;
             while (Math.abs(an) > epsilon && n < maxIterations) {
                 // compute next element in the series
                 n = n + 1.0;
                 an = an * (x / (a + n));
-
                 // update partial sum
                 sum = sum + an;
             }
@@ -182,7 +159,6 @@
                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
             }
         }
-
         return ret;
     }
     
@@ -194,9 +170,7 @@
      * @return the regularized gamma function Q(a, x)
      * @throws MathException if the algorithm fails to converge.
      */
-    public static double regularizedGammaQ(double a, double x)
-        throws MathException
-    {
+    public static double regularizedGammaQ(double a, double x) throws MathException {
         return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
     }
     
@@ -222,14 +196,8 @@
      * @return the regularized gamma function P(a, x)
      * @throws MathException if the algorithm fails to converge.
      */
-    public static double regularizedGammaQ(final double a, 
-                                           double x, 
-                                           double epsilon, 
-                                           int maxIterations) 
-        throws MathException
-    {
+    public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws MathException {
         double ret;
-
         if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
             ret = Double.NaN;
         } else if (x == 0.0) {
@@ -252,11 +220,9 @@
                     return n * (a - n);
                 }
             };
-            
             ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);
             ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;
         }
-
         return ret;
     }
 }
