diff -urwE '--exclude=*.patch' '--exclude=*.fix.java' /mnt/d4j_bug_info/buggyfiles/math/math_87_buggy/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java /mnt/D4JPatches/Manual2023/patches_correct/Math/Math_87/Math_87_APRConfig/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
--- /mnt/d4j_bug_info/buggyfiles/math/math_87_buggy/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	2022-11-20 04:09:32.000000000 -0800
+++ /mnt/D4JPatches/Manual2023/patches_correct/Math/Math_87/Math_87_APRConfig/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java	2023-11-13 22:37:06.000000000 -0800
@@ -14,7 +14,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.commons.math.optimization.linear;
 
 import java.io.IOException;
@@ -26,7 +25,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
-
 import org.apache.commons.math.linear.MatrixUtils;
 import org.apache.commons.math.linear.RealMatrix;
 import org.apache.commons.math.linear.RealMatrixImpl;
@@ -62,31 +60,49 @@
  */
 class SimplexTableau implements Serializable {
 
-    /** Serializable version identifier. */
+    /**
+     * Serializable version identifier.
+     */
     private static final long serialVersionUID = -1369660067587938365L;
 
-    /** Linear objective function. */
+    /**
+     * Linear objective function.
+     */
     private final LinearObjectiveFunction f;
 
-    /** Linear constraints. */
+    /**
+     * Linear constraints.
+     */
     private final Collection<LinearConstraint> constraints;
 
-    /** Whether to restrict the variables to non-negative values. */
+    /**
+     * Whether to restrict the variables to non-negative values.
+     */
     private final boolean restrictToNonNegative;
 
-    /** Simple tableau. */
+    /**
+     * Simple tableau.
+     */
     protected transient RealMatrix tableau;
 
-    /** Number of decision variables. */
+    /**
+     * Number of decision variables.
+     */
     protected final int numDecisionVariables;
 
-    /** Number of slack variables. */
+    /**
+     * Number of slack variables.
+     */
     protected final int numSlackVariables;
 
-    /** Number of artificial variables. */
+    /**
+     * Number of artificial variables.
+     */
     protected int numArtificialVariables;
 
-    /** Amount of error to accept in floating point comparisons. */ 
+    /**
+     * Amount of error to accept in floating point comparisons.
+     */
     protected final double epsilon;
     
     /**
@@ -98,19 +114,14 @@
      * @param restrictToNonNegative whether to restrict the variables to non-negative values
      * @param epsilon amount of error to accept in floating point comparisons
      */
-    SimplexTableau(final LinearObjectiveFunction f,
-                   final Collection<LinearConstraint> constraints,
-                   final GoalType goalType, final boolean restrictToNonNegative,
-                   final double epsilon) {
+    SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) {
         this.f                      = f;
         this.constraints            = constraints;
         this.restrictToNonNegative  = restrictToNonNegative;
         this.epsilon                = epsilon;
         this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);
-        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +
-                                      getConstraintTypeCounts(Relationship.GEQ);
-        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +
-                                      getConstraintTypeCounts(Relationship.GEQ);
+        this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ);
+        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ);
         this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));
         initialize();
     }
@@ -121,69 +132,57 @@
      * @return created tableau
      */
     protected double[][] createTableau(final boolean maximize) {
-
         // create a matrix of the correct size
         List<LinearConstraint> constraints = getNormalizedConstraints();
-        int width = numDecisionVariables + numSlackVariables +
-        numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS
+        int width = numDecisionVariables + numSlackVariables + numArtificialVariables + getNumObjectiveFunctions() + // + 1 is for RHS
+        1;
         int height = constraints.size() + getNumObjectiveFunctions();
         double[][] matrix = new double[height][width];
-
         // initialize the objective function rows
         if (getNumObjectiveFunctions() == 2) {
             matrix[0][0] = -1;
         }
         int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
         matrix[zIndex][zIndex] = maximize ? 1 : -1;
-        RealVector objectiveCoefficients =
-            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
+        RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
             copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
-            matrix[zIndex][width - 1] =
-                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
-
+        matrix[zIndex][width - 1] = maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
                 if (!restrictToNonNegative) {
-                    matrix[zIndex][getSlackVariableOffset() - 1] =
-                        getInvertedCoeffiecientSum(objectiveCoefficients);
+            matrix[zIndex][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(objectiveCoefficients);
                 }
-
                 // initialize the constraint rows
                 int slackVar = 0;
                 int artificialVar = 0;
                 for (int i = 0; i < constraints.size(); i++) {
                     LinearConstraint constraint = constraints.get(i);
                     int row = getNumObjectiveFunctions() + i;
-
                     // decision variable coefficients
                     copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
-
                     // x-
                     if (!restrictToNonNegative) {
-                        matrix[row][getSlackVariableOffset() - 1] =
-                            getInvertedCoeffiecientSum(constraint.getCoefficients());
+                matrix[row][getSlackVariableOffset() - 1] = getInvertedCoeffiecientSum(constraint.getCoefficients());
                     }
-
                     // RHS
                     matrix[row][width - 1] = constraint.getValue();
-
                     // slack variables
                     if (constraint.getRelationship() == Relationship.LEQ) {
-                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack
+                // slack
+                matrix[row][getSlackVariableOffset() + slackVar++] = 1;
                     } else if (constraint.getRelationship() == Relationship.GEQ) {
-                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess
+                // excess
+                matrix[row][getSlackVariableOffset() + slackVar++] = -1;
                     }
-
                     // artificial variables
-                    if ((constraint.getRelationship() == Relationship.EQ) ||
-                        (constraint.getRelationship() == Relationship.GEQ)) {
+            if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) {
                         matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 
                         matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; 
                     }
                 }
-
                 return matrix;
     }
 
-    /** Get the number of variables.
+    /**
+     * Get the number of variables.
      * @return number of variables
      */
     public int getNumVariables() {
@@ -209,12 +208,9 @@
      */
     private LinearConstraint normalize(final LinearConstraint constraint) {
         if (constraint.getValue() < 0) {
-            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),
-                                        constraint.getRelationship().oppositeRelationship(),
-                                        -1 * constraint.getValue());
+            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), -1 * constraint.getValue());
         }
-        return new LinearConstraint(constraint.getCoefficients(), 
-                                    constraint.getRelationship(), constraint.getValue());
+        return new LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());
     }
 
     /**
@@ -272,14 +268,12 @@
     private Integer getBasicRow(final int col) {
         Integer row = null;
         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
+            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {
                 row = i;
-                } else {
+            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
                 return null;
                 }
             }
-        }
         return row;
     }
 
@@ -303,14 +297,12 @@
         this.numArtificialVariables = 0;
     }
 
-
     /**
      * @param src the source array
      * @param dest the destination array
      * @param destPos the destination position
      */
-    private void copyArray(final double[] src, final double[] dest,
-                           final int destPos) {
+    private void copyArray(final double[] src, final double[] dest, final int destPos) {
         System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length); 
     }
 
@@ -323,8 +315,7 @@
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        Integer basicRow =
-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
         Set<Integer> basicRows = new HashSet<Integer>();
         for (int i = 0; i < coefficients.length; i++) {
@@ -335,9 +326,7 @@
                 coefficients[i] = 0;
             } else {
                 basicRows.add(basicRow);
-                coefficients[i] =
-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                    (restrictToNonNegative ? 0 : mostNegative);
+                coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);
             }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
@@ -368,11 +357,9 @@
      * @param subtrahendRow row index
      * @param multiple multiplication factor
      */
-    protected void subtractRow(final int minuendRow, final int subtrahendRow,
-                               final double multiple) {
+    protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) {
         for (int j = 0; j < getWidth(); j++) {
-            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -
-                             multiple * tableau.getEntry(subtrahendRow, j));
+            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - multiple * tableau.getEntry(subtrahendRow, j));
         }
     }
 
@@ -392,7 +379,8 @@
         return tableau.getRowDimension();
     }
 
-    /** Get an entry of the tableau.
+    /**
+     * Get an entry of the tableau.
      * @param row row index
      * @param column column index
      * @return entry at (row, column)
@@ -401,13 +389,13 @@
         return tableau.getEntry(row, column);
     }
 
-    /** Set an entry of the tableau.
+    /**
+     * Set an entry of the tableau.
      * @param row row index
      * @param column column index
      * @param value for the entry
      */
-    protected final void setEntry(final int row, final int column,
-                                  final double value) {
+    protected final void setEntry(final int row, final int column, final double value) {
         tableau.setEntry(row, column, value);
     }
 
@@ -482,67 +470,51 @@
         return tableau.getData();
     }
 
-    /** {@inheritDoc} */
+    /**
+     * {@inheritDoc}
+     */
     @Override
     public boolean equals(Object other) {
-
       if (this == other) { 
         return true;
       }
-
       if (other == null) {
         return false;
       }
-
       try {
-
           SimplexTableau rhs = (SimplexTableau) other;
-          return (restrictToNonNegative  == rhs.restrictToNonNegative) &&
-                 (numDecisionVariables   == rhs.numDecisionVariables) &&
-                 (numSlackVariables      == rhs.numSlackVariables) &&
-                 (numArtificialVariables == rhs.numArtificialVariables) &&
-                 (epsilon                == rhs.epsilon) &&
-                 f.equals(rhs.f) &&
-                 constraints.equals(rhs.constraints) &&
-                 tableau.equals(rhs.tableau);
-
+            return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);
       } catch (ClassCastException ex) {
           // ignore exception
           return false;
       }
-
     }
     
-    /** {@inheritDoc} */
+    /**
+     * {@inheritDoc}
+     */
     @Override
     public int hashCode() {
-        return Boolean.valueOf(restrictToNonNegative).hashCode() ^
-               numDecisionVariables ^
-               numSlackVariables ^
-               numArtificialVariables ^
-               Double.valueOf(epsilon).hashCode() ^
-               f.hashCode() ^
-               constraints.hashCode() ^
-               tableau.hashCode();
+        return Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables ^ numSlackVariables ^ numArtificialVariables ^ Double.valueOf(epsilon).hashCode() ^ f.hashCode() ^ constraints.hashCode() ^ tableau.hashCode();
     }
 
-    /** Serialize the instance.
+    /**
+     * Serialize the instance.
      * @param oos stream where object should be written
      * @throws IOException if object cannot be written to stream
      */
-    private void writeObject(ObjectOutputStream oos)
-        throws IOException {
+    private void writeObject(ObjectOutputStream oos) throws IOException {
         oos.defaultWriteObject();
         MatrixUtils.serializeRealMatrix(tableau, oos);
     }
 
-    /** Deserialize the instance.
+    /**
+     * Deserialize the instance.
      * @param ois stream from which the object should be read
      * @throws ClassNotFoundException if a class in the stream cannot be found
      * @throws IOException if object cannot be read from the stream
      */
-    private void readObject(ObjectInputStream ois)
-      throws ClassNotFoundException, IOException {
+    private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
         ois.defaultReadObject();
         MatrixUtils.deserializeRealMatrix(this, "tableau", ois);
     }
