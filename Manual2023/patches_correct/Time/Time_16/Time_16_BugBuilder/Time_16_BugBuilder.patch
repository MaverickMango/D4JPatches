diff -urwE '--exclude=*.patch' '--exclude=*.fix.java' /mnt/d4j_bug_info/buggyfiles/time/time_16_buggy/src/main/java/org/joda/time/format/DateTimeFormatter.java /mnt/D4JPatches/Manual2023/patches_correct/Time/Time_16/Time_16_BugBuilder/src/main/java/org/joda/time/format/DateTimeFormatter.java
--- /mnt/d4j_bug_info/buggyfiles/time/time_16_buggy/src/main/java/org/joda/time/format/DateTimeFormatter.java	2022-11-20 04:09:31.000000000 -0800
+++ /mnt/D4JPatches/Manual2023/patches_correct/Time/Time_16/Time_16_BugBuilder/src/main/java/org/joda/time/format/DateTimeFormatter.java	2023-11-13 22:37:06.000000000 -0800
@@ -18,7 +18,6 @@
 import java.io.IOException;
 import java.io.Writer;
 import java.util.Locale;
-
 import org.joda.time.Chronology;
 import org.joda.time.DateTime;
 import org.joda.time.DateTimeFieldType;
@@ -79,21 +78,44 @@
  */
 public class DateTimeFormatter {
 
-    /** The internal printer used to output the datetime. */
+    /**
+     * The internal printer used to output the datetime.
+     */
     private final DateTimePrinter iPrinter;
-    /** The internal parser used to output the datetime. */
+
+    /**
+     * The internal parser used to output the datetime.
+     */
     private final DateTimeParser iParser;
-    /** The locale to use for printing and parsing. */
+
+    /**
+     * The locale to use for printing and parsing.
+     */
     private final Locale iLocale;
-    /** Whether the offset is parsed. */
+
+    /**
+     * Whether the offset is parsed.
+     */
     private final boolean iOffsetParsed;
-    /** The chronology to use as an override. */
+
+    /**
+     * The chronology to use as an override.
+     */
     private final Chronology iChrono;
-    /** The zone to use as an override. */
+
+    /**
+     * The zone to use as an override.
+     */
     private final DateTimeZone iZone;
-    /** The pivot year to use for two-digit year parsing. */
+
+    /**
+     * The pivot year to use for two-digit year parsing.
+     */
     private final Integer iPivotYear;
-    /** The default year for parsing month/day without year. */
+
+    /**
+     * The default year for parsing month/day without year.
+     */
     private final int iDefaultYear;
 
     /**
@@ -103,8 +125,7 @@
      * @param printer  the internal printer, null if cannot print
      * @param parser  the internal parser, null if cannot parse
      */
-    public DateTimeFormatter(
-            DateTimePrinter printer, DateTimeParser parser) {
+    public DateTimeFormatter(DateTimePrinter printer, DateTimeParser parser) {
         super();
         iPrinter = printer;
         iParser = parser;
@@ -119,11 +140,7 @@
     /**
      * Constructor.
      */
-    private DateTimeFormatter(
-            DateTimePrinter printer, DateTimeParser parser,
-            Locale locale, boolean offsetParsed,
-            Chronology chrono, DateTimeZone zone,
-            Integer pivotYear, int defaultYear) {
+    private DateTimeFormatter(DateTimePrinter printer, DateTimeParser parser, Locale locale, boolean offsetParsed, Chronology chrono, DateTimeZone zone, Integer pivotYear, int defaultYear) {
         super();
         iPrinter = printer;
         iParser = parser;
@@ -188,8 +205,7 @@
         if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {
             return this;
         }
-        return new DateTimeFormatter(iPrinter, iParser, locale,
-                iOffsetParsed, iChrono, iZone, iPivotYear, iDefaultYear);
+        return new DateTimeFormatter(iPrinter, iParser, locale, iOffsetParsed, iChrono, iZone, iPivotYear, iDefaultYear);
     }
 
     /**
@@ -221,8 +237,7 @@
         if (iOffsetParsed == true) {
             return this;
         }
-        return new DateTimeFormatter(iPrinter, iParser, iLocale,
-                true, iChrono, null, iPivotYear, iDefaultYear);
+        return new DateTimeFormatter(iPrinter, iParser, iLocale, true, iChrono, null, iPivotYear, iDefaultYear);
     }
 
     /**
@@ -256,8 +271,7 @@
         if (iChrono == chrono) {
             return this;
         }
-        return new DateTimeFormatter(iPrinter, iParser, iLocale,
-                iOffsetParsed, chrono, iZone, iPivotYear, iDefaultYear);
+        return new DateTimeFormatter(iPrinter, iParser, iLocale, iOffsetParsed, chrono, iZone, iPivotYear, iDefaultYear);
     }
 
     /**
@@ -320,8 +334,7 @@
         if (iZone == zone) {
             return this;
         }
-        return new DateTimeFormatter(iPrinter, iParser, iLocale,
-                false, iChrono, zone, iPivotYear, iDefaultYear);
+        return new DateTimeFormatter(iPrinter, iParser, iLocale, false, iChrono, zone, iPivotYear, iDefaultYear);
     }
 
     /**
@@ -367,8 +380,7 @@
         if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {
             return this;
         }
-        return new DateTimeFormatter(iPrinter, iParser, iLocale,
-                iOffsetParsed, iChrono, iZone, pivotYear, iDefaultYear);
+        return new DateTimeFormatter(iPrinter, iParser, iLocale, iOffsetParsed, iChrono, iZone, pivotYear, iDefaultYear);
     }
 
     /**
@@ -434,8 +446,7 @@
      * @since 2.0
      */
     public DateTimeFormatter withDefaultYear(int defaultYear) {
-        return new DateTimeFormatter(iPrinter, iParser, iLocale,
-                iOffsetParsed, iChrono, iZone, iPivotYear, defaultYear);
+        return new DateTimeFormatter(iPrinter, iParser, iLocale, iOffsetParsed, iChrono, iZone, iPivotYear, defaultYear);
     }
 
     /**
@@ -699,14 +710,11 @@
         if (instant == null) {
             throw new IllegalArgumentException("Instant must not be null");
         }
-        
         long instantMillis = instant.getMillis();
         Chronology chrono = instant.getChronology();
         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
         chrono = selectChronology(chrono);
-        
-        DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
+        DateTimeParserBucket bucket = new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);
         int newPos = parser.parseInto(bucket, text, position);
         instant.setMillis(bucket.computeMillis(false, text));
         if (iOffsetParsed && bucket.getOffsetInteger() != null) {
@@ -737,7 +745,6 @@
      */
     public long parseMillis(String text) {
         DateTimeParser parser = requireParser();
-        
         Chronology chrono = selectChronology(iChrono);
         DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
         int newPos = parser.parseInto(bucket, text, 0);
@@ -803,14 +810,15 @@
      */
     public LocalDateTime parseLocalDateTime(String text) {
         DateTimeParser parser = requireParser();
-        
-        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps
+        // always use UTC, avoiding DST gaps
+        Chronology chrono = selectChronology(null).withUTC();
         DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
         int newPos = parser.parseInto(bucket, text, 0);
         if (newPos >= 0) {
             if (newPos >= text.length()) {
                 long millis = bucket.computeMillis(true, text);
-                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true
+                if (bucket.getOffsetInteger() != null) {
+                    // treat withOffsetParsed() as being true
                     int parsedOffset = bucket.getOffsetInteger();
                     DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
                     chrono = chrono.withZone(parsedZone);
@@ -844,7 +852,6 @@
      */
     public DateTime parseDateTime(String text) {
         DateTimeParser parser = requireParser();
-        
         Chronology chrono = selectChronology(null);
         DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
         int newPos = parser.parseInto(bucket, text, 0);
@@ -889,7 +896,6 @@
      */
     public MutableDateTime parseMutableDateTime(String text) {
         DateTimeParser parser = requireParser();
-        
         Chronology chrono = selectChronology(null);
         DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);
         int newPos = parser.parseInto(bucket, text, 0);
@@ -945,5 +951,4 @@
         }
         return chrono;
     }
-
 }
