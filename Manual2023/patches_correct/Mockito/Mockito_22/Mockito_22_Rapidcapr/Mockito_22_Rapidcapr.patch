diff -urwE '--exclude=*.patch' '--exclude=*.fix.java' /mnt/d4j_bug_info/buggyfiles/mockito/mockito_22_buggy/src/org/mockito/internal/matchers/Equality.java /mnt/D4JPatches/Manual2023/patches_correct/Mockito/Mockito_22/Mockito_22_Rapidcapr/src/org/mockito/internal/matchers/Equality.java
--- /mnt/d4j_bug_info/buggyfiles/mockito/mockito_22_buggy/src/org/mockito/internal/matchers/Equality.java	2022-11-20 04:09:31.000000000 -0800
+++ /mnt/D4JPatches/Manual2023/patches_correct/Mockito/Mockito_22/Mockito_22_Rapidcapr/src/org/mockito/internal/matchers/Equality.java	2023-11-13 22:37:06.000000000 -0800
@@ -7,18 +7,33 @@
 import java.lang.reflect.Array;
 
 //stolen from hamcrest because I didn't want to have more dependency than Matcher class 
-public class Equality {
-
     public static boolean areEqual(Object o1, Object o2) {
+        if (o1 == o2) {
+            return true;
+        }
         if (o1 == null || o2 == null) {
-            return o1 == null && o2 == null;
+            return false;
         } else if (isArray(o1)) {
-            return isArray(o2) && areArraysEqual(o1, o2);
+            if (!isArray(o2)) {
+                return false;
+            }
+            if (Array.getLength(o1) != Array.getLength(o2)) {
+                return false;
+            }
+            for (int i = 0; i < Array.getLength(o1); i++) {
+                Object e1 = Array.get(o1, i);
+                Object e2 = Array.get(o2, i);
+                if (!areEqual(e1, e2)) {
+                    return false;
+               }
+            }
+            return true;
         } else {
             return o1.equals(o2);
         }
     }
 
+
     static boolean areArraysEqual(Object o1, Object o2) {
         return areArrayLengthsEqual(o1, o2)
                 && areArrayElementsEqual(o1, o2);
@@ -38,4 +53,4 @@
     static boolean isArray(Object o) {
         return o.getClass().isArray();
     }
-}
+
